$boardBackground: #362f1b;
$gridLineBorder: 1vh;
$ticColor: #d4b357;
$defaultColor: #e0d7ba;
@keyframes drawlines {
  from {
    height: 0;
  }
}
@keyframes draw {
  to {
    stroke-dashoffset: 0;
  }
}
@keyframes zoom {
  from {
    transform: scale(0);
  }
  to {
    transform: scale(1);
  }
}
@keyframes strikethrough {
  from {
    width: 0;
  }
  to {
    width: 110%;
  }
}
@keyframes fadein {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes fadeout {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
*,
*::before,
*::after {
  box-sizing: border-box;
}
html,
body,
#root {
  height: 100%;
}
body {
  background-color: #452e00;
  background-image: url("../img/black-linen.webp");
  font: 14px "Sen", sans-serif;
  color: $defaultColor;
  text-align: center;
  margin: auto;
}
#gameOver {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: fixed;
  left: 0;
  top: 0;
  height: 100vh;
  width: 100vw;
  @supports (not (backdrop-filter: blur())) {
    background-color: rgba(51, 28, 4, 0.95);
  }
  backdrop-filter: blur(10px);
  p {
    font-size: 7em;
    text-shadow: 0px 0px 25px rgba(248, 255, 232, 1);
    color: $ticColor;
    span {
      position: relative;
      &::after {
        animation: 1s ease both 2.5s strikethrough;
        display: block;
        content: "";
        height: 10%;
        border-radius: 10px;
        opacity: 0.9;
        background-color: red;
        position: absolute;
        left: -5%;
        top: 55%;
      }
    }
  }
}
.but {
  cursor: pointer;
  background: #d4b357;
  color: #544418;
  max-width: 80vw;
  border: none;
  padding: 1vh;
  border-radius: 10px;
  transition: 0.3s;
  font-size: 8vh;
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      background: #917524;
    }
  }
}
.container {
  display: flex;
  flex-direction: column;
  height: 100vh;
}
img {
  flex: 0 0 auto;
  height: 7vh;
  margin: 0 2vw 0 2vw;
}
#title {
  font-size: 7vh;
  margin: 0;
}
#logo {
  display: flex;
  padding: 0 4vw 0 4vw;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin: 5vh 0 5vh 0;
}
.gridLine {
  opacity: 0.6;
  position: absolute;
  height: 100%;
  width: $gridLineBorder;
  border-radius: 10px;
  pointer-events: none;
  background-color: $defaultColor;
  animation: 1s both drawlines;
  &#id1 {
    top: 0;
    left: calc(100% / 3);
  }
  &#id2 {
    top: 0;
    left: calc(100% / 3 * 2);
    animation-delay: 0.3s;
  }
  &#id3 {
    top: calc(100% / 3);
    left: 0;
    transform: rotate(-90deg);
    transform-origin: top left;
    animation-delay: 0.6s;
  }
  &#id4 {
    top: calc(100% / 3 * 2);
    left: 0;
    transform: rotate(-90deg);
    transform-origin: top left;
    animation-delay: 0.9s;
  }
}

.line {
  opacity: 0.9;
  position: absolute;
  width: 0;
  border-radius: 10px;
  transform-origin: left;
  background-color: #c00;
  transition: width 1s 1s;
  //Yeah, transform and scaleX is faster, but I'll have to figure out how to animate rotation and scale separately without knowing the rotation angle beforehand + it's going to be defined by React on the element in html which obv overrides css
}
.board {
  position: relative;
  border: none;
  // flex: 0 0 auto;
  max-height: 100%;
}

.board-row:after {
  clear: both;
  content: "";
  display: table;
}

.square {
  cursor: pointer;
  background-color: rgba(255, 255, 255, 0);
  padding: 0;
  border-radius: 0px;
  border: none;
  float: left;
  .xline {
    stroke-linecap: round;
    stroke: $ticColor;
    animation: 0.25s ease forwards draw;
  }
  #rotated {
    animation: 0.25s 0.25s ease forwards draw;
  }
  .circle {
    stroke-linecap: round;
    stroke: $ticColor;
    fill: transparent;
    animation: 0.7s ease forwards draw;
  }
}
.game {
  flex: 1 1 auto;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
}
button:focus {
  outline: none;
}
